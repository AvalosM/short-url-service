// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -source=./manager.go -destination=./mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	metrics "github.com/AvalosM/short-url-service/pkg/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateMetrics mocks base method.
func (m *MockStorage) CreateMetrics(ctx context.Context, arg1 map[string]*metrics.Collector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetrics", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetrics indicates an expected call of CreateMetrics.
func (mr *MockStorageMockRecorder) CreateMetrics(ctx, arg1 any) *MockStorageCreateMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetrics", reflect.TypeOf((*MockStorage)(nil).CreateMetrics), ctx, arg1)
	return &MockStorageCreateMetricsCall{Call: call}
}

// MockStorageCreateMetricsCall wrap *gomock.Call
type MockStorageCreateMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateMetricsCall) Return(arg0 error) *MockStorageCreateMetricsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateMetricsCall) Do(f func(context.Context, map[string]*metrics.Collector) error) *MockStorageCreateMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateMetricsCall) DoAndReturn(f func(context.Context, map[string]*metrics.Collector) error) *MockStorageCreateMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetrics mocks base method.
func (m *MockStorage) GetMetrics(ctx context.Context, shortURLId string, from, to time.Time) (*metrics.Metrics, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, shortURLId, from, to)
	ret0, _ := ret[0].(*metrics.Metrics)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockStorageMockRecorder) GetMetrics(ctx, shortURLId, from, to any) *MockStorageGetMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockStorage)(nil).GetMetrics), ctx, shortURLId, from, to)
	return &MockStorageGetMetricsCall{Call: call}
}

// MockStorageGetMetricsCall wrap *gomock.Call
type MockStorageGetMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageGetMetricsCall) Return(arg0 *metrics.Metrics, arg1 bool, arg2 error) *MockStorageGetMetricsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageGetMetricsCall) Do(f func(context.Context, string, time.Time, time.Time) (*metrics.Metrics, bool, error)) *MockStorageGetMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageGetMetricsCall) DoAndReturn(f func(context.Context, string, time.Time, time.Time) (*metrics.Metrics, bool, error)) *MockStorageGetMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, args ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, args ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, args ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, args ...any) *MockLoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
	return &MockLoggerWarnCall{Call: call}
}

// MockLoggerWarnCall wrap *gomock.Call
type MockLoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnCall) Return() *MockLoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnCall) Do(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
