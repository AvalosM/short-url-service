// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -source=./manager.go -destination=./mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockStorage) CreateShortURL(ctx context.Context, id, longURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, id, longURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockStorageMockRecorder) CreateShortURL(ctx, id, longURL any) *MockStorageCreateShortURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockStorage)(nil).CreateShortURL), ctx, id, longURL)
	return &MockStorageCreateShortURLCall{Call: call}
}

// MockStorageCreateShortURLCall wrap *gomock.Call
type MockStorageCreateShortURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateShortURLCall) Return(arg0 error) *MockStorageCreateShortURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateShortURLCall) Do(f func(context.Context, string, string) error) *MockStorageCreateShortURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateShortURLCall) DoAndReturn(f func(context.Context, string, string) error) *MockStorageCreateShortURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteShortURL mocks base method.
func (m *MockStorage) DeleteShortURL(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURL", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURL indicates an expected call of DeleteShortURL.
func (mr *MockStorageMockRecorder) DeleteShortURL(ctx, id any) *MockStorageDeleteShortURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURL", reflect.TypeOf((*MockStorage)(nil).DeleteShortURL), ctx, id)
	return &MockStorageDeleteShortURLCall{Call: call}
}

// MockStorageDeleteShortURLCall wrap *gomock.Call
type MockStorageDeleteShortURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageDeleteShortURLCall) Return(arg0 error) *MockStorageDeleteShortURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageDeleteShortURLCall) Do(f func(context.Context, string) error) *MockStorageDeleteShortURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageDeleteShortURLCall) DoAndReturn(f func(context.Context, string) error) *MockStorageDeleteShortURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLongURL mocks base method.
func (m *MockStorage) GetLongURL(ctx context.Context, id string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongURL", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLongURL indicates an expected call of GetLongURL.
func (mr *MockStorageMockRecorder) GetLongURL(ctx, id any) *MockStorageGetLongURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongURL", reflect.TypeOf((*MockStorage)(nil).GetLongURL), ctx, id)
	return &MockStorageGetLongURLCall{Call: call}
}

// MockStorageGetLongURLCall wrap *gomock.Call
type MockStorageGetLongURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageGetLongURLCall) Return(arg0 string, arg1 bool, arg2 error) *MockStorageGetLongURLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageGetLongURLCall) Do(f func(context.Context, string) (string, bool, error)) *MockStorageGetLongURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageGetLongURLCall) DoAndReturn(f func(context.Context, string) (string, bool, error)) *MockStorageGetLongURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key any) *MockCacheDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
	return &MockCacheDeleteCall{Call: call}
}

// MockCacheDeleteCall wrap *gomock.Call
type MockCacheDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheDeleteCall) Return(arg0 error) *MockCacheDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheDeleteCall) Do(f func(context.Context, string) error) *MockCacheDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockCacheDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key any) *MockCacheGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
	return &MockCacheGetCall{Call: call}
}

// MockCacheGetCall wrap *gomock.Call
type MockCacheGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheGetCall) Return(arg0 string, arg1 bool, arg2 error) *MockCacheGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheGetCall) Do(f func(context.Context, string) (string, bool, error)) *MockCacheGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheGetCall) DoAndReturn(f func(context.Context, string) (string, bool, error)) *MockCacheGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key, value string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, duration any) *MockCacheSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, duration)
	return &MockCacheSetCall{Call: call}
}

// MockCacheSetCall wrap *gomock.Call
type MockCacheSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheSetCall) Return(arg0 error) *MockCacheSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheSetCall) Do(f func(context.Context, string, string, time.Duration) error) *MockCacheSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheSetCall) DoAndReturn(f func(context.Context, string, string, time.Duration) error) *MockCacheSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, args ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, args ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, args ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, args ...any) *MockLoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
	return &MockLoggerWarnCall{Call: call}
}

// MockLoggerWarnCall wrap *gomock.Call
type MockLoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnCall) Return() *MockLoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnCall) Do(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
